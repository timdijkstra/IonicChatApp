const express = require('express');
const app = express();
const path = require('path');
const passport = require('passport');
const mongoose = require('mongoose');
const User = require('./models/user');
const config = require('./config/config');
//const passportMiddleware = require('./middleware/passport');

app.set('view engine', 'ejs');
app.set('views', 'views');


const trainerRoutes = require('./routes/trainer');
const authRoutes = require('./routes/auth');
app.use(express.urlencoded({ extended: false }));

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));
//app.use(passport.initialize());
//passport.use(passportMiddleware);

app.use((req, res, next) => {
  User.findById('5e887a102242d751d0dfbd78')
  .then(user => {
      req.user = user;
      next();
  })
  .catch(err => console.log(err));
});

app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, GET, POST, PUT, PATCH, DELETE');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  next();
});
app.use('/trainer', trainerRoutes);
app.use('/auth', authRoutes);

//letting the server handle the error instead of an autogenerated error
app.use((error, req, res, next) => {
  console.log(error);
  const status = error.statusCode || 500;
  const message = error.message;
  res.status(status).json({ message: message });
});

mongoose.connect(config.db, { useNewUrlParser: true })
.then(result => {
  User.findOne().then(user => {
      if(!user){
          const user = new User({
              name: 'Ymke',
              email: 'ymke@test.com',
              cart: {
                  items: []
              }
          });
          user.save();
      }
  });
  app.listen(process.env.PORT || 3000);
})
.catch(err => {
    console.log(err);
});
